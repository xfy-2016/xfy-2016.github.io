{"tags":[{"name":"性能优化 css","permalink":"http://yoursite.com/tags/性能优化-css/","url":"/async/tags/性能优化 css.json","count":1}],"categories":[{"name":"前端性能优化","permalink":"http://yoursite.com/categories/前端性能优化/","url":"/async/categories/前端性能优化.json","count":1}],"url":"/async/posts/2016/07/08/reflow和repaint.json","date":1467993158000,"path":{"year":2016,"month":7,"day":8,"name":"reflow和repaint"},"title":"reflow和repaint","permalink":"http://yoursite.com/2016/07/08/reflow和repaint/","content":"<h2 id=\"什么是回流-reflow-和重绘-repaint-？\"><a href=\"#什么是回流-reflow-和重绘-repaint-？\" class=\"headerlink\" title=\"什么是回流(reflow)和重绘(repaint)？\"></a>什么是回流(reflow)和重绘(repaint)？</h2><p>首先要了解CSS的图层的概念（Chrome浏览器）<br>浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。在渲染DOM的时候，浏览器所做的工作实际上是：</p>\n<p>获取DOM后分割为多个图层<br>对每个图层的节点计算样式结果（Recalculate style—样式重计算）<br>为每个节点生成图形和位置（Layout—回流和重布局）<br>将每个节点绘制填充到图层位图中（Paint Setup和Paint—重绘）<br>图层作为纹理上传至GPU<br>符合多个图层到页面上生成最终屏幕图像（Composite Layers—图层重组）<br>Chrome中满足以下任意情况就会创建图层：</p>\n<ul>\n<li>3D或透视变换（perspective transform）CSS属性</li>\n<li>使用加速视频解码的<code>&lt;video&gt;</code>节点</li>\n<li>拥有3D（WebGL）上下文或加速的2D上下文的<code>&lt;canvas&gt;</code>节点</li>\n<li>混合插件（如Flash）</li>\n<li>对自己的opacity做CSS动画或使用一个动画webkit变换的元素</li>\n<li>拥有加速CSS过滤器的元素</li>\n<li>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）</li>\n<li>元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</li>\n</ul>\n<p>需要注意的是，如果图层中某个元素需要重绘，那么整个图层都需要重绘。比如一个图层包含很多节点，其中有个gif图，gif图的每一帧，都会重回整个图层的其他节点，然后生成最终的图层位图。所以这需要通过特殊的方式来强制gif图属于自己一个图层（translateZ(0)或者translate3d(0,0,0)），CSS3的动画也是一样（好在绝大部分情况浏览器自己会为CSS3动画的节点创建图层）</p>\n<p>简化一下上述过程，每一帧动画浏览器可能需要做如下工作：</p>\n<p>计算需要被加载到节点上的样式结果（Recalculate style—样式重计算）<br>为每个节点生成图形和位置（Layout—回流和重布局）<br>将每个节点填充到图层中（Paint Setup和Paint—重绘）<br>组合图层到页面上（Composite Layers—图层重组）<br>如果我们需要使得动画的性能提高，需要做的就是减少浏览器在动画运行时所需要做的工作。最好的情况是，改变的属性仅仅印象图层的组合，变换（transform）和透明度（opacity）就属于这种情况</p>\n<p>现代浏览器如Chrome，Firefox，Safari和Opera都对变换和透明度采用硬件加速，但IE10+不是很确定是否硬件加速</p>\n<p>触发重布局的属性</p>\n<p>有些节点，当你改变他时，会需要重新布局（这也意味着需要重新计算其他被影响的节点的位置和大小）。这种情况下，被影响的DOM树越大（可见节点），重绘所需要的时间就会越长，而渲染一帧动画的时间也相应变长。所以需要尽力避免这些属性</p>\n<p>一些常用的改变时会触发重布局的属性：<br>盒子模型相关属性会触发重布局：</p>\n<ul>\n<li>width</li>\n<li>height</li>\n<li>padding</li>\n<li>margin</li>\n<li>display</li>\n<li>border-width</li>\n<li>border</li>\n<li>min-height</li>\n</ul>\n<p>定位属性及浮动也会触发重布局：</p>\n<ul>\n<li>top</li>\n<li>bottom</li>\n<li>left</li>\n<li>right</li>\n<li>position</li>\n<li>float</li>\n<li>clear</li>\n</ul>\n<p>改变节点内部文字结构也会触发重布局：</p>\n<ul>\n<li>text-align</li>\n<li>overflow-y</li>\n<li>font-weight</li>\n<li>overflow</li>\n<li>font-family</li>\n<li>line-height</li>\n<li>vertival-align</li>\n<li>white-space</li>\n<li>font-size</li>\n</ul>\n<p>这么多常用属性都会触发重布局，可以看到，他们的特点就是可能修改整个节点的大小或位置，所以会触发重布局</p>\n<p>别使用CSS类名做状态标记</p>\n<p>如果在网页中使用CSS的类来对节点做状态标记，当这些节点的状态标记类修改时，将会触发节点的重绘和重布局。所以在节点上使用CSS类来做状态比较是代价很昂贵的</p>\n<p>触发重绘的属性</p>\n<p>修改时只触发重绘的属性有：</p>\n<ul>\n<li>color</li>\n<li>border-style</li>\n<li>border-radius</li>\n<li>visibility</li>\n<li>text-decoration</li>\n<li>background</li>\n<li>background-image</li>\n<li>background-position</li>\n<li>background-repeat</li>\n<li>background-size</li>\n<li>outline-color</li>\n<li>outline</li>\n<li>outline-style</li>\n<li>outline-width</li>\n<li>box-shadow</li>\n</ul>\n<p>这样可以看到，这些属性都不会修改节点的大小和位置，自然不会触发重布局，但是节点内部的渲染效果进行了改变，所以只需要重绘就可以了</p>\n<h3 id=\"手机就算重绘也很慢\"><a href=\"#手机就算重绘也很慢\" class=\"headerlink\" title=\"手机就算重绘也很慢\"></a>手机就算重绘也很慢</h3><p>在重绘时，这些节点会被加载到GPU中进行重绘，这对移动设备如手机的影响还是很大的。因为CPU不如台式机或笔记本电脑，所以绘画巫妖的时间更长。而且CPU与GPU之间的有较大的带宽限制，所以纹理的上传需要一定时间</p>\n<h3 id=\"透明度竟然不会触发重绘？\"><a href=\"#透明度竟然不会触发重绘？\" class=\"headerlink\" title=\"透明度竟然不会触发重绘？\"></a>透明度竟然不会触发重绘？</h3><p>需要注意的是，上面那些触发重绘的属性里面没有opacity（透明度），很奇怪不是吗？实际上透明度的改变后，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。不过这个前提是这个被修改opacity本身必须是一个图层，如果图层下还有其他节点，GPU也会将他们透明化</p>\n<h3 id=\"强迫浏览器创建图层\"><a href=\"#强迫浏览器创建图层\" class=\"headerlink\" title=\"强迫浏览器创建图层\"></a>强迫浏览器创建图层</h3><p>在Blink和WebKit的浏览器中，一当一个节点被设定了透明度的相关过渡效果或动画时，浏览器会将其作为一个单独的图层，但很多开发者使用translateZ(0)或者translate3d(0,0,0)去使浏览器创建图层。这种方式可以消除在动画开始之前的图层创建时间，使得动画尽快开始（创建图层和绘制图层还是比较慢的），而且不会随着抗锯齿而导出突变。不过这种方法需要节制，否则会因为创建过多的图层导致崩溃</p>\n<h3 id=\"Chrome中的抗锯齿\"><a href=\"#Chrome中的抗锯齿\" class=\"headerlink\" title=\"Chrome中的抗锯齿\"></a>Chrome中的抗锯齿</h3><p>Chrome中，非根图层以及透明图层使用grayscale antialiasing而不是subpixel antialiasing，如果抗锯齿方法变化，这个效果将会非常显著。如果你打算预处理一个节点而不打算等到动画开始，可以通过这种强迫浏览器创建图层的方式进行</p>\n<h3 id=\"transform变换是你的选择\"><a href=\"#transform变换是你的选择\" class=\"headerlink\" title=\"transform变换是你的选择\"></a>transform变换是你的选择</h3><p>我们通过节点的transform可以修改节点的位置、旋转、大小等。我们平常会使用left和top属性来修改节点的位置，但正如上面所述，left和top会触发重布局，修改时的代价相当大。取而代之的更好方法是使用translate，这个不会触发重布局</p>\n<h2 id=\"JS动画和CSS3动画的比较\"><a href=\"#JS动画和CSS3动画的比较\" class=\"headerlink\" title=\"JS动画和CSS3动画的比较\"></a>JS动画和CSS3动画的比较</h2><p>我们经常面临一个抉择：是使用JavaScript的动画还是使用CSS的动画，下面将对比一下这两种方式</p>\n<h3 id=\"JS动画\"><a href=\"#JS动画\" class=\"headerlink\" title=\"JS动画\"></a>JS动画</h3><p>缺点：JavaScript在浏览器的主线程中运行，而其中还有很多其他需要运行的JavaScript、样式计算、布局、绘制等对其干扰。这也就导致了线程可能出现阻塞，从而造成丢帧的情况。</p>\n<p>优点：JavaScript的动画与CSS预先定义好的动画不同，可以在其动画过程中对其进行控制：开始、暂停、回放、中止、取消都是可以做到的。而且一些动画效果，比如视差滚动效果，只有JavaScript能够完成</p>\n<h3 id=\"CSS动画\"><a href=\"#CSS动画\" class=\"headerlink\" title=\"CSS动画\"></a>CSS动画</h3><p>缺点：缺乏强大的控制能力。而且很难以有意义的方式结合到一起，使得动画变得复杂且易于出问题。<br>优点：浏览器可以对动画进行优化。它必要时可以创建图层，然后在主线程之外运行。</p>\n<h2 id=\"动画建议\"><a href=\"#动画建议\" class=\"headerlink\" title=\"动画建议\"></a>动画建议</h2><p>动画给予了页面丰富的视觉体验。我们应该尽力避免使用会触发重布局和重绘的属性，以免失帧。最好提前申明动画，这样能让浏览器提前对动画进行优化。由于GPU的参与，现在用来做动画的最好属性是如下几个：</p>\n<ul>\n<li>opacity</li>\n<li>translate</li>\n<li>rotate</li>\n<li>scale</li>\n</ul>\n<p>也许会有一些新的方式使得可以使用JavaScript做出更好的没有限制的动画，而且不用担心主线程的阻塞问题。但在那之前，还是好好考虑下如何做出流畅的动画吧</p>\n"}